import streamlit as st
import pandas as pd
import numpy as np
import pickle

st.set_page_config(page_title="Predicci√≥n de Cancelaci√≥n Hotelera", layout="wide")

st.title("üõéÔ∏è Predicci√≥n de Cancelaci√≥n de Reservas de Hotel")
st.markdown("Este modelo predice si una reserva ser√° cancelada con base en sus caracter√≠sticas.")

# Cargar modelo entrenado
@st.cache_resource
def cargar_modelo():
    with open("modelo_final_rf.pkl", "rb") as f:
        return pickle.load(f)

modelo = cargar_modelo()

# Formulario de entrada de datos
with st.form("formulario_prediccion"):
    st.subheader("‚úçÔ∏è Ingrese los datos de la reserva:")

    col1, col2, col3 = st.columns(3)

    with col1:
        num_adultos = st.number_input("N√∫mero de adultos", min_value=1, max_value=5, value=2)
        num_ni√±os = st.number_input("N√∫mero de ni√±os", min_value=0, max_value=5, value=0)
        num_noches_fin_de_semana = st.slider("Noches en fin de semana", 0, 5, 1)
        num_noches_semana = st.slider("Noches entre semana", 0, 10, 2)

    with col2:
        tipo_plan_comidas = st.selectbox("Tipo de plan de comidas", ["Meal Plan 1", "Meal Plan 2", "Meal Plan 3", "Not Selected"])
        requiere_parqueadero_texto = st.selectbox("¬øRequiere parqueadero?", ["No", "S√≠"])
        tipo_habitaci√≥n_reservada = st.selectbox("Tipo de habitaci√≥n", ["Room_Type 1", "Room_Type 2", "Room_Type 3", "Room_Type 4", "Room_Type 5", "Room_Type 6", "Room_Type 7"])
        antelaci√≥n_reserva = st.slider("Antelaci√≥n de la reserva (d√≠as)", 0, 500, 50)

    with col3:
        mes_llegada = st.slider("Mes de llegada", 1, 12, 6)
        d√≠a_llegada = st.slider("D√≠a de llegada", 1, 31, 15)
        tipo_segmento_mercado = st.selectbox("Segmento de mercado", ["Online", "Offline", "Corporate", "Complementary", "Aviation"])
        hu√©sped_recurrente_texto = st.selectbox("¬øHu√©sped recurrente?", ["No", "S√≠"])
        num_cancelaciones_previas = st.slider("Cancelaciones previas", 0, 10, 0)
        num_reservas_previas_no_canceladas = st.slider("Reservas previas no canceladas", 0, 10, 0)
        precio_promedio_por_habitaci√≥n = st.number_input("Precio promedio por habitaci√≥n", 0.0, 500.0, 100.0)
        num_solicitudes_especiales = st.slider("Solicitudes especiales", 0, 5, 0)

    enviar = st.form_submit_button("üìä Predecir cancelaci√≥n")

if enviar:
    # Conversi√≥n de campos texto a valores num√©ricos esperados por el modelo
    requiere_parqueadero = 1 if requiere_parqueadero_texto == "S√≠" else 0
    hu√©sped_recurrente = 1 if hu√©sped_recurrente_texto == "S√≠" else 0
    a√±o_llegada = 2017  # Valor quemado

    # Crear DataFrame de una sola fila
    datos = pd.DataFrame({
        "num_adultos": [num_adultos],
        "num_ni√±os": [num_ni√±os],
        "num_noches_fin_de_semana": [num_noches_fin_de_semana],
        "num_noches_semana": [num_noches_semana],
        "tipo_plan_comidas": [tipo_plan_comidas],
        "requiere_parqueadero": [requiere_parqueadero],
        "tipo_habitaci√≥n_reservada": [tipo_habitaci√≥n_reservada],
        "antelaci√≥n_reserva": [antelaci√≥n_reserva],
        "a√±o_llegada": [a√±o_llegada],
        "mes_llegada": [mes_llegada],
        "d√≠a_llegada": [d√≠a_llegada],
        "tipo_segmento_mercado": [tipo_segmento_mercado],
        "hu√©sped_recurrente": [hu√©sped_recurrente],
        "num_cancelaciones_previas": [num_cancelaciones_previas],
        "num_reservas_previas_no_canceladas": [num_reservas_previas_no_canceladas],
        "precio_promedio_por_habitaci√≥n": [precio_promedio_por_habitaci√≥n],
        "num_solicitudes_especiales": [num_solicitudes_especiales]
    })

    # Predicci√≥n
    pred = modelo.predict(datos)[0]
    proba = modelo.predict_proba(datos)[0][1]

    st.subheader("üîç Resultado de la predicci√≥n:")

    # Generar texto con los valores de entrada
    texto_entrada = "Para la combinaci√≥n de estos datos de entrada:\n\n"
    for col, val in datos.iloc[0].items():
        texto_entrada += f"- **{col}**: {val}\n"
    st.markdown(texto_entrada)

    # Mostrar predicci√≥n
    if pred == 1:
        st.error(f"‚ö†Ô∏è Esta reserva probablemente ser√° **CANCELADA** ({proba*100:.2f}% de probabilidad).")
    else:
        st.success(f"‚úÖ Esta reserva probablemente **NO ser√° cancelada** ({(1 - proba)*100:.2f}% de probabilidad).")
