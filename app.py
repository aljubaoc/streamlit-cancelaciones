if enviar:
    # Conversi√≥n de campos texto a valores num√©ricos esperados por el modelo
    requiere_parqueadero = 1 if requiere_parqueadero_texto == "S√≠" else 0
    hu√©sped_recurrente = 1 if hu√©sped_recurrente_texto == "S√≠" else 0
    a√±o_llegada = 2017  # Valor quemado

    # Crear DataFrame de una sola fila
    datos = pd.DataFrame({
        "num_adultos": [num_adultos],
        "num_ni√±os": [num_ni√±os],
        "num_noches_fin_de_semana": [num_noches_fin_de_semana],
        "num_noches_semana": [num_noches_semana],
        "tipo_plan_comidas": [tipo_plan_comidas],
        "requiere_parqueadero": [requiere_parqueadero],
        "tipo_habitaci√≥n_reservada": [tipo_habitaci√≥n_reservada],
        "antelaci√≥n_reserva": [antelaci√≥n_reserva],
        "a√±o_llegada": [a√±o_llegada],
        "mes_llegada": [mes_llegada],
        "d√≠a_llegada": [d√≠a_llegada],
        "tipo_segmento_mercado": [tipo_segmento_mercado],
        "hu√©sped_recurrente": [hu√©sped_recurrente],
        "num_cancelaciones_previas": [num_cancelaciones_previas],
        "num_reservas_previas_no_canceladas": [num_reservas_previas_no_canceladas],
        "precio_promedio_por_habitaci√≥n": [precio_promedio_por_habitaci√≥n],
        "num_solicitudes_especiales": [num_solicitudes_especiales]
    })

    # Predicci√≥n
    pred = modelo.predict(datos)[0]
    proba = modelo.predict_proba(datos)[0][1]

    st.subheader("üîç Resultado de la predicci√≥n:")

    # Generar texto con los valores de entrada
    texto_entrada = "Para la combinaci√≥n de estos datos de entrada:\n\n"
    for col, val in datos.iloc[0].items():
        texto_entrada += f"- **{col}**: {val}\n"
    st.markdown(texto_entrada)

    # Mostrar predicci√≥n
    if pred == 1:
        st.error(f"‚ö†Ô∏è Esta reserva probablemente ser√° **CANCELADA** ({proba*100:.2f}% de probabilidad).")
    else:
        st.success(f"‚úÖ Esta reserva probablemente **NO ser√° cancelada** ({(1 - proba)*100:.2f}% de probabilidad).")
